module clb2(input a,
           input b,
           input c,
           input d,
           output x,
           output y,
           input k
    );
    reg[1:0] mux2select;
    reg[1:0] mux3select;
    reg[1:0] mux4select;
    reg[1:0] mux5select;
    reg[1:0] mux6select;
    reg [15:0] mem;
    reg dqmux1,dqmux2;
    reg o2m1_0,o2m1_1;
    reg o2m2_0,o2m2_1;
    reg o2m3_0,o2m3_1;    
    reg q;
    
    reg floporlatch;
    reg [1:0] comboption;
    wire f,g,s,r,klk;
   
    initial
     begin
        mux2select=2'b00;
        mux3select=2'b00;
        mux4select=2'b00;
         mux5select=2'b00;
        mux6select=2'b00;
       mem=16'h0F0F;
       dqmux1=1'b0;dqmux2=1'b0;
       q=1'b1;
       comboption=2'b11;
       o2m1_0=1'b0;
       o2m1_1=1'b0;
       o2m2_0=1'b0;
       o2m2_1=1'b0;
       o2m3_0=1'b0;
       o2m3_1=1'b0;
     end
    
    reg out1,out2; //variables used for all the three options
    
    wire d0;    //variables and muxes used in option 1
    mux m1(d0,d,q,dqmux1);
    
    
    wire out3,out4,a1,a2,b1,b2,c1,c2; //variables and muxes used for option 2
    mux m7(a1,a,b,o2m1_0);
    mux m8(b1,b,c,o2m2_0);
    mux m9(out3,d,q,dqmux1);
    mux m10(c1,c,out3,o2m3_0);
    
    mux m11(a2,a,b,o2m1_1);
    mux m12(b2,b,c,o2m2_1);
    mux m13(out4,d,q,dqmux2);
    mux m14(c2,c,out4,o2m3_1);
    
    wire d3,d2;               //variables and muxes used for option 3
    mux m15(d3,d,q,dqmux1);
    mux m16(d2,d,q,dqmux2);
   always@(*)
   begin
     if(comboption==2'b00)
        begin
        
                    if(a==1'b0&&b==1'b0&&c==1'b0&&d0==1'b0)
                   out1=mem[0];
               else if(a==1'b0&&b==1'b0&&c==1'b0&&d0==1'b1)
                   out1=mem[1];
               else if(a==1'b0&&b==1'b0&&c==1'b1&&d0==1'b0)
                   out1=mem[2];
               else if(a==1'b0&&b==1'b0&&c==1'b1&&d0==1'b1)
                   out1=mem[3];
               else if(a==1'b0&&b==1'b1&&c==1'b0&&d0==1'b0)
                   out1=mem[4];
               else if(a==1'b0&&b==1'b1&&c==1'b0&&d0==1'b1)
                   out1=mem[5];
               else if(a==1'b0&&b==1'b1&&c==1'b1&&d0==1'b0)
                   out1=mem[6];
               else if(a==1'b0&&b==1'b1&&c==1'b1&&d0==1'b1)
                   out1=mem[7];
               else if(a==1'b1&&b==1'b0&&c==1'b0&&d0==1'b0)
                   out1=mem[8];
               else if(a==1'b1&&b==1'b0&&c==1'b0&&d0==1'b1)
                   out1=mem[9];   
               else if(a==1'b1&&b==1'b0&&c==1'b1&&d0==1'b0)
                   out1=mem[10];
               else if(a==1'b1&&b==1'b0&&c==1'b1&&d0==1'b1)
                   out1=mem[11];                                             
               else if(a==1'b1&&b==1'b1&&c==1'b0&&d0==1'b0)
                   out1=mem[12];                                             
               else if(a==1'b1&&b==1'b1&&c==1'b0&&d0==1'b1)
                   out1=mem[13];
               else if(a==1'b1&&b==1'b1&&c==1'b1&&d0==1'b0)
                   out1=mem[14];                                                         
               else if(a==1'b1&&b==1'b1&&c==1'b1&&d0==1'b1)
                   out1=mem[15];
               out2=out1;
        end
        
        
      else if(comboption==2'b01)
        begin
                if(a1==1'b0&&b1==1'b00&&c1==1'b0)
                     out1=mem[0];
                else if(a1==1'b0&&b1==1'b0&&c1==1'b1)
                     out1=mem[1];
                else if(a1==1'b0&&b1==1'b1&&c1==1'b0)
                     out1=mem[2];
                else if(a1==1'b0&&b1==1'b1&&c1==1'b1)
                     out1=mem[3];                 
                else if(a1==1'b1&&b1==1'b0&&c1==1'b0)
                     out1=mem[4];
                else if(a1==1'b1&&b1==1'b0&&c1==1'b1)
                     out1=mem[5];
                else if(a1==1'b1&&b1==1'b1&&c1==1'b0)
                     out1=mem[6];
                else if(a1==1'b1&&b1==1'b1&&c1==1'b1)
                     out1=mem[7];
         
               if(a2==1'b0&&b2==1'b00&&c2==1'b0)
                     out2=mem[8];
               else if(a2==1'b0&&b2==1'b0&&c2==1'b1)
                     out2=mem[9];
               else if(a2==1'b0&&b2==1'b1&&c2==1'b0)
                     out2=mem[10];
               else if(a2==1'b0&&b2==1'b1&&c2==1'b1)
                     out2=mem[11];                 
               else if(a2==1'b1&&b2==1'b0&&c2==1'b0)
                     out2=mem[12];
               else if(a2==1'b1&&b2==1'b0&&c2==1'b1)
                     out2=mem[13];
               else if(a2==1'b1&&b2==1'b1&&c2==1'b0)
                     out2=mem[14];
               else if(a2==1'b1&&b2==1'b1&&c2==1'b1)
                     out2=mem[15];
         end 
        
       else
              begin
                 if(a==1'b0&&c==1'b00&&d3==1'b0)
                  out1=mem[0];
             else if(a==1'b0&&c==1'b0&&d3==1'b1)
                  out1=mem[1];
             else if(a==1'b0&&c==1'b1&&d3==1'b0)
                  out1=mem[2];
             else if(a==1'b0&&c==1'b1&&d3==1'b1)
                  out1=mem[3];                 
             else if(a==1'b1&&c==1'b0&&d3==1'b0)
                  out1=mem[4];
             else if(a==1'b1&&c==1'b0&&d3==1'b1)
                  out1=mem[5];
             else if(a==1'b1&&c==1'b1&&d3==1'b0)
                  out1=mem[6];
             else if(a==1'b1&&c==1'b1&&d3==1'b1)
                  out1=mem[7];
         
                  if(a==1'b0&&c==1'b00&&d2==1'b0)
                       out2=mem[8];
                  else if(a==1'b0&&c==1'b0&&d2==1'b1)
                       out2=mem[9];
                  else if(a==1'b0&&c==1'b1&&d2==1'b0)
                       out2=mem[10];
                  else if(a==1'b0&&c==1'b1&&d2==1'b1)
                       out2=mem[11];                 
                  else if(a==1'b1&&c==1'b0&&d2==1'b0)
                       out2=mem[12];
                  else if(a==1'b1&&c==1'b0&&d2==1'b1)
                       out2=mem[13];
                  else if(a==1'b1&&c==1'b1&&d2==1'b0)
                       out2=mem[14];
                  else if(a==1'b1&&c==1'b1&&d2==1'b1)
                       out2=mem[15];
                       
                       if(b==1'b0)
                          out2=out1;
                        else
                          out1=out2;
                end
         
   end
       assign g=out2;
       assign f=out1;
    mux2 m2(s,a,f,1'b0,mux2select[1],mux2select[0]);   // for getting outputs x and y from f and g
    mux2 m3(klk,g,c,k,mux3select[1],mux3select[0]);
    mux2 m4(r,d,g,1'b0,mux4select[1],mux4select[0]);
    mux2 m5(x,f,g,q,mux5select[1],mux5select[0]);
    mux2 m6(y,q,g,f,mux6select[1],mux6select[0]);
    always@(s or r)                      //set and reset functions
     begin                        
      if(s==1'b1)
        q<=1'b1;
       else if(r==1'b1)
         q<=1'b0; 
      end
    always @(posedge klk)       d flip flp
          q<=f;
    
endmodule
